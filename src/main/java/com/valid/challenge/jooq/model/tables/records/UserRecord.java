/*
 * This file is generated by jOOQ.
 */
package com.valid.challenge.jooq.model.tables.records;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.valid.challenge.jooq.model.tables.User;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "USER", schema = "USERS", uniqueConstraints = {
    @UniqueConstraint(name = "CONSTRAINT_2", columnNames = {"ID"})
})
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record4<Integer, String, String, Boolean> {

    private static final long serialVersionUID = 716891057;

    /**
     * Setter for <code>USERS.USER.ID</code>.
     */
    public UserRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>USERS.USER.ID</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID", nullable = false, precision = 10)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>USERS.USER.NAME</code>.
     */
    public UserRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>USERS.USER.NAME</code>.
     */
    @Column(name = "NAME", nullable = false, length = 45)
    @NotNull
    @Size(max = 45)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>USERS.USER.LAST_NAME</code>.
     */
    public UserRecord setLastName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>USERS.USER.LAST_NAME</code>.
     */
    @Column(name = "LAST_NAME", nullable = false, length = 45)
    @NotNull
    @Size(max = 45)
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>USERS.USER.PROCESS</code>.
     */
    public UserRecord setProcess(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>USERS.USER.PROCESS</code>.
     */
    @Column(name = "PROCESS", precision = 1)
    public Boolean getProcess() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return User.USER.ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.NAME;
    }

    @Override
    public Field<String> field3() {
        return User.USER.LAST_NAME;
    }

    @Override
    public Field<Boolean> field4() {
        return User.USER.PROCESS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public Boolean component4() {
        return getProcess();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public Boolean value4() {
        return getProcess();
    }

    @Override
    public UserRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public UserRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public UserRecord value4(Boolean value) {
        setProcess(value);
        return this;
    }

    @Override
    public UserRecord values(Integer value1, String value2, String value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Integer id, String name, String lastName, Boolean process) {
        super(User.USER);

        set(0, id);
        set(1, name);
        set(2, lastName);
        set(3, process);
    }
}
